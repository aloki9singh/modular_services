{"version":3,"sources":["../../src/routes/EventRoutes.ts"],"sourcesContent":["// Import necessary modules and types from Express\r\nimport express, { Router } from \"express\";\r\nimport { AuthenticationMiddleware } from \"../middlewares/AuthenticationMiddleware\";\r\nimport { EventController } from \"../controllers/EventController\";\r\nimport { Routes } from \"@interfaces/routes.interface\";\r\n\r\n// Class definition for EventRoutes implementing the Routes interface\r\nclass EventRoutes implements Routes {\r\n\t// Define the base path for these routes\r\n\tpublic path = \"/event\";\r\n\r\n\t// Create an Express Router instance\r\n\tpublic router = Router();\r\n\r\n\t// Create an instance of EventController for handling event-related routes\r\n\tpublic eventController = new EventController();\r\n\r\n\t// Constructor to initialize routes\r\n\tconstructor() {\r\n\t\tthis.initializeRoutes();\r\n\t}\r\n\r\n\t// Method to initialize event-related routes\r\n\tprivate initializeRoutes() {\r\n\t\t// Route to schedule a new event\r\n\t\tthis.router.post(\r\n\t\t\t`${this.path}/schedule_event`,\r\n\t\t\tAuthenticationMiddleware.isAuthenticated, // Middleware to ensure user is authenticated\r\n\t\t\tEventController.scheduleEvent,\r\n\t\t);\r\n\r\n\t\t// Route to list events for a specific user\r\n\t\tthis.router.get(\r\n\t\t\t`${this.path}/list-events/:email`,\r\n\t\t\tAuthenticationMiddleware.isAuthenticated, // Middleware to ensure user is authenticated\r\n\t\t\tEventController.listEvent,\r\n\t\t);\r\n\r\n\t\t// Route to update an existing event\r\n\t\tthis.router.post(\r\n\t\t\t`${this.path}/update-event/:eventId`,\r\n\t\t\tAuthenticationMiddleware.isAuthenticated, // Middleware to ensure user is authenticated\r\n\t\t\tEventController.updateEvent,\r\n\t\t);\r\n\r\n\t\t// Route to delete an existing event\r\n\t\tthis.router.get(\r\n\t\t\t`${this.path}/delete-event/:eventId`,\r\n\t\t\tAuthenticationMiddleware.isAuthenticated, // Middleware to ensure user is authenticated\r\n\t\t\tEventController.deleteEvent,\r\n\t\t);\r\n\r\n\t\t// this.router.get(\r\n\t\t// \t`${this.path}/tests`,\r\n\t\t// \tEventController.test,\r\n\t\t// );\r\n\t}\r\n}\r\n\r\n// Export the EventRoutes class\r\nexport default EventRoutes;\r\n"],"names":["EventRoutes","initializeRoutes","router","post","path","AuthenticationMiddleware","isAuthenticated","EventController","scheduleEvent","get","listEvent","updateEvent","deleteEvent","constructor","Router","eventController"],"mappings":";;;;+BA4DA;;;eAAA;;;yBA3DgC;0CACS;iCACT;;;;;;;;;;;;;;AAIhC,IAAA,AAAMA,cAAN,MAAMA;IAgBGC,mBAAmB;QAE1B,IAAI,CAACC,MAAM,CAACC,IAAI,CACf,CAAC,EAAE,IAAI,CAACC,IAAI,CAAC,eAAe,CAAC,EAC7BC,kDAAwB,CAACC,eAAe,EACxCC,gCAAe,CAACC,aAAa;QAI9B,IAAI,CAACN,MAAM,CAACO,GAAG,CACd,CAAC,EAAE,IAAI,CAACL,IAAI,CAAC,mBAAmB,CAAC,EACjCC,kDAAwB,CAACC,eAAe,EACxCC,gCAAe,CAACG,SAAS;QAI1B,IAAI,CAACR,MAAM,CAACC,IAAI,CACf,CAAC,EAAE,IAAI,CAACC,IAAI,CAAC,sBAAsB,CAAC,EACpCC,kDAAwB,CAACC,eAAe,EACxCC,gCAAe,CAACI,WAAW;QAI5B,IAAI,CAACT,MAAM,CAACO,GAAG,CACd,CAAC,EAAE,IAAI,CAACL,IAAI,CAAC,sBAAsB,CAAC,EACpCC,kDAAwB,CAACC,eAAe,EACxCC,gCAAe,CAACK,WAAW;IAO7B;IAtCAC,aAAc;QATd,uBAAOT,QAAO;QAGd,uBAAOF,UAASY,IAAAA,eAAM;QAGtB,uBAAOC,mBAAkB,IAAIR,gCAAe;QAI3C,IAAI,CAACN,gBAAgB;IACtB;AAqCD;MAGA,WAAeD"}