{"version":3,"sources":["../../src/controllers/url.controller.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport validator from \"validator\";\r\nimport URL from \"../models/url.model\";\r\nimport Log from \"../models/log.model\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nimport {\r\n\tgenerateUniqueShortID,\r\n\tgetExpirationDate,\r\n\tcreateNewURL,\r\n} from \"../services/url\";\r\n\r\n\r\nclass UrlController {\r\n\tpublic async shortenURL(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst { original_url, expiration_date, title, description } =\r\n\t\t\t\treq.body;\r\n\r\n\t\t\t// Validate the original_url\r\n\t\t\tif (!validator.isURL(original_url)) {\r\n\t\t\t\tres.status(400).json({ error: \"Invalid URL format\" });\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Generate a unique short_id\r\n\t\t\tconst short_id: string = generateUniqueShortID();\r\n\r\n\t\t\tconst expirationDate = getExpirationDate(expiration_date);\r\n\r\n\t\t\t// Create a new URL entry in the database\r\n\t\t\tconst url = createNewURL(\r\n\t\t\t\toriginal_url,\r\n\t\t\t\tshort_id,\r\n\t\t\t\texpirationDate,\r\n\t\t\t\ttitle,\r\n\t\t\t\tdescription,\r\n\t\t\t);\r\n\r\n\t\t\tawait url.save();\r\n\r\n\t\t\tres.json({\r\n\t\t\t\tshort_url: url.short_url,\r\n\t\t\t\tshort_id\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async redirectToOriginalURL(\r\n\t\treq: Request,\r\n\t\tres: Response,\r\n\t): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst { shortId } = req.params;\r\n\t\t\tconst ip_address = req.headers[\"x-forwarded-for\"] || req.ip;\r\n\r\n\t\t\tconst referrer =\r\n\t\t\t\treq.headers.referer || req.headers.referrer || \"No referrer\";\r\n\t\t\tconsole.log(\"referrer\", referrer);\r\n\r\n\t\t\t// Find the URL in the database using the short_id\r\n\t\t\tconst url = await URL.findOne({ short_id: shortId });\r\n\r\n\t\t\tif (!url) {\r\n\t\t\t\tres.status(404).json({ error: \"URL not found\" });\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Handling Expired URLs\r\n\t\t\tif (\r\n\t\t\t\turl.expiration_date &&\r\n\t\t\t\tnew Date(url.expiration_date) < new Date()\r\n\t\t\t) {\r\n\t\t\t\t// Update the status to 'expired'\r\n\t\t\t\turl.status = \"expired\";\r\n\t\t\t\tawait url.save();\r\n\r\n\t\t\t\tres.status(400).json({ error: \"URL has expired\" });\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst log = await Log.create({\r\n\t\t\t\turl_id: url._id,\r\n\t\t\t\tip_address,\r\n\t\t\t\tvisit_time: Date.now(),\r\n\t\t\t\treferrer,\r\n\t\t\t});\r\n\r\n\t\t\t// Redirect to the original URL\r\n\t\t\tres.redirect(url.original_url);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async updateURL(req: Request, res: Response): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst { shortId } = req.params;\r\n\t\t\tconst updateFields = req.body;\r\n\r\n\t\t\t// Handling Non-Existing URLs\r\n\t\t\tconst url = await URL.findOne({ short_id: shortId });\r\n\t\t\tif (!url) {\r\n\t\t\t\tres.status(404).json({ error: \"URL not found\" });\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Check if the user is trying to update the expiry date\r\n\t\t\tif (updateFields.expiration_date) {\r\n\t\t\t\tconst newExpirationDate = new Date(\r\n\t\t\t\t\tupdateFields.expiration_date,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Check if the new expiration date is beyond the present date and time\r\n\t\t\t\tif (newExpirationDate <= new Date()) {\r\n\t\t\t\t\t//console.log(\"Expiry date cannot be set in the past or present\")\r\n\t\t\t\t\tres.status(400).json({\r\n\t\t\t\t\t\terror: \"Expiry date cannot be set in the past or present\",\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Update the expiration_date in the URL\r\n\t\t\t\turl.expiration_date = newExpirationDate;\r\n\t\t\t\turl.status = 'active';\r\n\t\t\t}\r\n\r\n\t\t\t// Update the fields in the database\r\n\t\t\tfor (const [key, value] of Object.entries(updateFields)) {\r\n\t\t\t\t// Skip the expiration_date since we handled it separately\r\n\t\t\t\tif (key !== \"expiration_date\") {\r\n\t\t\t\t\t// Explicitly cast to any if needed\r\n\t\t\t\t\t(url as any)[key] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Save the updated URL\r\n\t\t\tawait url.save();\r\n\r\n\t\t\t// Return the updated fields in the response\r\n\t\t\tres.json(updateFields);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getShortUrlsByAppId(\r\n\t\treq: Request,\r\n\t\tres: Response,\r\n\t): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// const { app_id } = req.params;\r\n\t\t\tconst { page } = req.query;\r\n\r\n\t\t\tconst pageSize = 10; // Adjust the page size as needed\r\n\t\t\t//   const result = await URL.getByAppId(app_id, page, pageSize);\r\n\r\n\t\t\tconst result = await URL.find()\r\n\t\t\t\t.skip(((page as unknown as number) - 1) * pageSize)\r\n\t\t\t\t.limit(pageSize)\r\n\t\t\t\t.sort({ createdAt: \"desc\" });\r\n\t\t\tres.send(result);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error fetching URLs by App Id:\", error);\r\n\t\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t\t}\r\n\t}\r\n\r\n\t// Controller to delete short URL by shortId\r\n\tpublic async deleteShortUrl(req: Request, res: Response): Promise<void> {\r\n\t\tconst { shortId } = req.params;\r\n\r\n\t\ttry {\r\n\t\t\tconst deletedUrl = await URL.findOneAndDelete({\r\n\t\t\t\tshort_id: shortId,\r\n\t\t\t});\r\n\r\n\t\t\tif (deletedUrl) {\r\n\t\t\t\tres.json({\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\tmessage: \"URL deleted successfully\",\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tres.status(404).json({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: \"URL not found\",\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error deleting URL by shortId:\", error);\r\n\t\t\tres.status(500).json({\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tmessage: \"Internal Server Error\",\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default UrlController;\r\n"],"names":["dotenv","config","UrlController","shortenURL","req","res","original_url","expiration_date","title","description","body","validator","isURL","status","json","error","short_id","generateUniqueShortID","expirationDate","getExpirationDate","url","createNewURL","save","short_url","console","redirectToOriginalURL","shortId","params","ip_address","headers","ip","referrer","referer","log","URL","findOne","Date","Log","create","url_id","_id","visit_time","now","redirect","updateURL","updateFields","newExpirationDate","key","value","Object","entries","getShortUrlsByAppId","page","query","pageSize","result","find","skip","limit","sort","createdAt","send","deleteShortUrl","deletedUrl","findOneAndDelete","success","message"],"mappings":"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"}