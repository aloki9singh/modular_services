{"version":3,"sources":["../../src/controllers/auth.controller.ts"],"sourcesContent":["// Import necessary modules and libraries\r\nimport { google } from \"googleapis\";\r\nimport OpenBrowserUtil from \"../utils/OpenBrowserUtil\";\r\nimport dotenv from \"dotenv\";\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport passport from \"passport\";\r\nimport \"../configs/passport\";\r\n\r\n// Load environment variables from a .env.development.local file\r\ndotenv.config();\r\n\r\n// Import configuration settings\r\nimport env from \"../configs/env\";\r\nimport { token } from \"../interfaces/token\";\r\n\r\n// Extend the Session interface to include a 'tokens' property\r\ndeclare module \"express-session\" {\r\n\tinterface Session {\r\n\t\ttokens: token;\r\n\t}\r\n}\r\n\r\n// Class definition for AuthController\r\nexport class AuthController {\r\n\t// Static properties for user email and tokens\r\n\tpublic static userEmail: string;\r\n\tpublic static tokenn: token;\r\n\r\n\t// Create an OAuth2Client using Google API credentials\r\n\tprivate static oAuth2Client = new google.auth.OAuth2(\r\n\t\tprocess.env.CLIENT_ID || \"\",\r\n\t\tprocess.env.CLIENT_SECRET || \"\",\r\n\t\tprocess.env.REDIRECT_URI || \"\"\r\n\t);\r\n\r\n\t// Create an OAuth2 instance for Google OAuth2 API\r\n\tprivate static oauth2 = google.oauth2({\r\n\t\tauth: AuthController.oAuth2Client,\r\n\t\tversion: \"v2\",\r\n\t});\r\n\r\n\t// Handle the callback after Google has authorized the user\r\n\tpublic static async handleOAuthCallback(req: Request, res: Response) {\r\n\t\t// Extract authorization code from the URL\r\n\t\tconst { code: urlCode } = req.query;\r\n\t\tconsole.log(urlCode);\r\n\r\n\t\ttry {\r\n\t\t\t// Check if authorization code is present in the URL\r\n\t\t\tif (!urlCode) throw new Error(\"Authorization code not found in the URL.\");\r\n\r\n\t\t\t// Extract authorization code from the query parameters\r\n\t\t\tconst code: string = req.query.code as string;\r\n\t\t\tconsole.log(\"Authorization code\", code);\r\n\r\n\t\t\t// Exchange authorization code for tokens\r\n\t\t\tconst { tokens }: any = await AuthController.oAuth2Client.getToken(code);\r\n\t\t\tconsole.log(\"Token\", tokens);\r\n\r\n\t\t\t// Set OAuth2Client credentials and get user information\r\n\t\t\tAuthController.oAuth2Client.setCredentials(tokens);\r\n\t\t\tconst userInfoResponse = await AuthController.oauth2.userinfo.get();\r\n\t\t\tAuthController.userEmail = userInfoResponse.data.email || \"\";\r\n\r\n\t\t\t// Store tokens in the session for future use\r\n\t\t\treq.session.tokens = tokens;\r\n\t\t\tAuthController.tokenn = tokens;\r\n\r\n\t\t\t// Redirect to the main page or any other route\r\n\t\t\tres.redirect(\"http://localhost:3000/\");\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error exchanging code for tokens:\", error);\r\n\t\t\tres.status(500).send(\"Internal Server Error\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Initiate the authentication process by redirecting to Google OAuth2 URL\r\n\tpublic static authenticateUser(req: Request, res: Response) {\r\n\r\n\t\t// Generate authentication URL with required scopes\r\n\t\tconst authUrl = AuthController.oAuth2Client.generateAuthUrl({\r\n\t\t\taccess_type: \"offline\",\r\n\t\t\tscope: [\r\n\t\t\t\t\"https://www.googleapis.com/auth/calendar\",\r\n\t\t\t\t\"https://www.googleapis.com/auth/userinfo.email\",\r\n\t\t\t],\r\n\t\t\tclient_id: process.env.CLIENT_ID,\r\n\t\t\tredirect_uri: process.env.REDIRECT_URL,\r\n\t\t});\r\n\r\n\t\t// Open the browser for authentication\r\n\t\tOpenBrowserUtil.open(authUrl);\r\n\r\n\t\t// Redirect to the authentication URL\r\n\t\tres.redirect(authUrl);\r\n\t}\r\n\r\n\tpublic login = async (req: Request, res: Response, next: NextFunction) => {\r\n\t\tpassport.authenticate(\"local\", function (err, user) {\r\n\t\t\tif (err || !user) {\r\n\t\t\t\treturn res.status(401).json({\r\n\t\t\t\t\tmessage: err,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treq.logIn(user, function (err) {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn next(err);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn res.status(200).json({\r\n\t\t\t\t\tmessage: \"Sign in successful!\",\r\n\t\t\t\t\terror: false,\r\n\t\t\t\t\tuser: req.user,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t})(req, res, next);\r\n\t};\r\n\r\n\tpublic signout = async (\r\n\t\treq: Request,\r\n\t\tres: Response,\r\n\t\tnext: NextFunction,\r\n\t) => {\r\n\t\treq.logout(function (err) {\r\n\t\t\tif (err) return next(err);\r\n\t\t\tres.status(200).clearCookie(env.AUTH_COOKIE_NAME, {\r\n\t\t\t\tdomain: env.COOKIE_DOMAIN,\r\n\t\t\t});\r\n\t\t\treq.session.destroy(function (err) {\r\n\t\t\t\tif (err) return next(err);\r\n\t\t\t\treturn res\r\n\t\t\t\t\t.status(200)\r\n\t\t\t\t\t.send({message: \"Logged out successfully\", error: false});\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n}\r\n\r\nexport default AuthController;\r\n\r\n"],"names":["AuthController","dotenv","config","handleOAuthCallback","req","res","code","urlCode","query","console","log","Error","tokens","oAuth2Client","getToken","setCredentials","userInfoResponse","oauth2","userinfo","get","userEmail","data","email","session","tokenn","redirect","error","status","send","authenticateUser","authUrl","generateAuthUrl","access_type","scope","client_id","process","env","CLIENT_ID","redirect_uri","REDIRECT_URL","OpenBrowserUtil","open","login","next","passport","authenticate","err","user","json","message","logIn","signout","logout","clearCookie","AUTH_COOKIE_NAME","domain","COOKIE_DOMAIN","destroy","google","auth","OAuth2","CLIENT_SECRET","REDIRECT_URI","version"],"mappings":";;;;;;;;;;;IAuBaA,cAAc;eAAdA;;IAmHb,OAA8B;eAA9B;;;4BAzIuB;0DACK;iDACT;mDAEE;QACd;8CAMS;;;;;;;;;;;;;;;;;;;AAHhBC,eAAM,CAACC,MAAM;AAcN,IAAA,AAAMF,iBAAN,MAAMA;IAmBZ,aAAoBG,oBAAoBC,GAAY,EAAEC,GAAa,EAAE;QAEpE,MAAM,EAAEC,MAAMC,OAAO,EAAE,GAAGH,IAAII,KAAK;QACnCC,QAAQC,GAAG,CAACH;QAEZ,IAAI;YAEH,IAAI,CAACA,SAAS,MAAM,IAAII,MAAM;YAG9B,MAAML,OAAeF,IAAII,KAAK,CAACF,IAAI;YACnCG,QAAQC,GAAG,CAAC,sBAAsBJ;YAGlC,MAAM,EAAEM,MAAM,EAAE,GAAQ,MAAMZ,eAAea,YAAY,CAACC,QAAQ,CAACR;YACnEG,QAAQC,GAAG,CAAC,SAASE;YAGrBZ,eAAea,YAAY,CAACE,cAAc,CAACH;YAC3C,MAAMI,mBAAmB,MAAMhB,eAAeiB,MAAM,CAACC,QAAQ,CAACC,GAAG;YACjEnB,eAAeoB,SAAS,GAAGJ,iBAAiBK,IAAI,CAACC,KAAK,IAAI;YAG1DlB,IAAImB,OAAO,CAACX,MAAM,GAAGA;YACrBZ,eAAewB,MAAM,GAAGZ;YAGxBP,IAAIoB,QAAQ,CAAC;QACd,EAAE,OAAOC,OAAO;YACfjB,QAAQiB,KAAK,CAAC,qCAAqCA;YACnDrB,IAAIsB,MAAM,CAAC,KAAKC,IAAI,CAAC;QACtB;IACD;IAGA,OAAcC,iBAAiBzB,GAAY,EAAEC,GAAa,EAAE;QAG3D,MAAMyB,UAAU9B,eAAea,YAAY,CAACkB,eAAe,CAAC;YAC3DC,aAAa;YACbC,OAAO;gBACN;gBACA;aACA;YACDC,WAAWC,QAAQC,GAAG,CAACC,SAAS;YAChCC,cAAcH,QAAQC,GAAG,CAACG,YAAY;QACvC;QAGAC,wBAAe,CAACC,IAAI,CAACX;QAGrBzB,IAAIoB,QAAQ,CAACK;IACd;;QAEA,uBAAOY,SAAQ,OAAOtC,KAAcC,KAAesC;YAClDC,iBAAQ,CAACC,YAAY,CAAC,SAAS,SAAUC,GAAG,EAAEC,IAAI;gBACjD,IAAID,OAAO,CAACC,MAAM;oBACjB,OAAO1C,IAAIsB,MAAM,CAAC,KAAKqB,IAAI,CAAC;wBAC3BC,SAASH;oBACV;gBACD;gBACA1C,IAAI8C,KAAK,CAACH,MAAM,SAAUD,GAAG;oBAC5B,IAAIA,KAAK;wBACR,OAAOH,KAAKG;oBACb;oBAEA,OAAOzC,IAAIsB,MAAM,CAAC,KAAKqB,IAAI,CAAC;wBAC3BC,SAAS;wBACTvB,OAAO;wBACPqB,MAAM3C,IAAI2C,IAAI;oBACf;gBACD;YACD,GAAG3C,KAAKC,KAAKsC;QACd;QAEA,uBAAOQ,WAAU,OAChB/C,KACAC,KACAsC;YAEAvC,IAAIgD,MAAM,CAAC,SAAUN,GAAG;gBACvB,IAAIA,KAAK,OAAOH,KAAKG;gBACrBzC,IAAIsB,MAAM,CAAC,KAAK0B,WAAW,CAACjB,YAAG,CAACkB,gBAAgB,EAAE;oBACjDC,QAAQnB,YAAG,CAACoB,aAAa;gBAC1B;gBACApD,IAAImB,OAAO,CAACkC,OAAO,CAAC,SAAUX,GAAG;oBAChC,IAAIA,KAAK,OAAOH,KAAKG;oBACrB,OAAOzC,IACLsB,MAAM,CAAC,KACPC,IAAI,CAAC;wBAACqB,SAAS;wBAA2BvB,OAAO;oBAAK;gBACzD;YACD;QACD;;AACD;AA/GC,iBAFY1B,gBAEEoB,aAAd,KAAA;AACA,iBAHYpB,gBAGEwB,UAAd,KAAA;AAGA,iBANYxB,gBAMGa,gBAAe,IAAI6C,kBAAM,CAACC,IAAI,CAACC,MAAM,CACnDzB,QAAQC,GAAG,CAACC,SAAS,IAAI,IACzBF,QAAQC,GAAG,CAACyB,aAAa,IAAI,IAC7B1B,QAAQC,GAAG,CAAC0B,YAAY,IAAI;AAI7B,iBAbY9D,gBAaGiB,UAASyC,kBAAM,CAACzC,MAAM,CAAC;IACrC0C,MAAM3D,eAAea,YAAY;IACjCkD,SAAS;AACV;MAmGD,WAAe/D"}