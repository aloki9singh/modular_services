{"version":3,"sources":["../../src/controllers/EventController.ts"],"sourcesContent":["// Import necessary modules and services\r\nimport { eventData } from \"@interfaces/eventData\";\r\nimport {Request, Response} from \"express\";\r\nimport {CalendarService} from \"../services/CalendarService\";\r\nimport {AuthController} from \"./auth.controller\";\r\n\r\n// Class definition for EventController\r\nexport class EventController {\r\n\r\n\t// Handle scheduling a new event\r\n\tpublic static async scheduleEvent(req: Request, res: Response) {\r\n\t\ttry {\r\n\t\t\t// Retrieve event data from the request body\r\n\t\t\tconst eventData = req.body;\r\n\r\n\t\t\t// Ensure the user is authenticated\r\n\t\t\tconst tokens = req.session.tokens;\r\n\t\t\tif (!AuthController.tokenn) throw new Error(\"User not authenticated. Please log in first..!!\");\r\n\t\t\tif(eventData.summary==\"\" ||eventData.location==\"\" || eventData.attendees.length==0){\r\n\t\t\t\tthrow new Error(\"summary or location or attendees is empty\"); \t\r\n\t\t\t\t}\r\n\t\t\t// Insert the event into the calendar\r\n\t\t\tconst response = await CalendarService.insertEvent(eventData);\r\n\r\n\t\t\t// Send success response\r\n\t\t\tres.status(201).send({\r\n\t\t\t\tmsg: \"Event created successfully\",\r\n\t\t\t});\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(\"Error creating event:\", error.message);\r\n\t\t\tres.status(500).send(\"Internal Server Error\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Handle listing events for the authenticated user\r\n\tpublic static async listEvent(req: Request, res: Response) {\r\n\t\ttry {\r\n\t\t\t// Ensure the user is authenticated\r\n\t\t\tconst tokens = req.session.tokens;\r\n\t\t\tif (!AuthController.tokenn) throw new Error(\"User not authenticated. Please log in first..!!\");\r\n\r\n\t\t\t// List events for the authenticated user\r\n\t\t\tconst response = await CalendarService.listEvents(\r\n\t\t\t\tAuthController.userEmail,\r\n\t\t\t);\r\n\r\n\t\t\t// Send the list of events as a response\r\n\t\t\tres.send(response);\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(\"Error listing event:\", error.message);\r\n\t\t\tres.status(500).send(\"Internal Server Error\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Handle updating an existing event\r\n\tpublic static async updateEvent(req: Request, res: Response) {\r\n\t\ttry {\r\n\t\t\t// Retrieve event ID from request parameters\r\n\t\t\tconst eventId:String = req.params.eventId;\r\n\r\n\t\t\t// Retrieve updated event data from the request body\r\n\t\t\tconst updatedEventData:eventData = req.body;\r\n\t\t\tconsole.log(updatedEventData);\r\n\r\n\t\t\t// Ensure the user is authenticated\r\n\t\t\tconst tokens = req.session.tokens;\r\n\t\t\tif (!AuthController.tokenn) throw new Error(\"User not authenticated. Please log in first..!!\");\r\n\t\t\tif(updatedEventData.summary==\"\" ||updatedEventData.location==\"\" || updatedEventData.attendees.length==0){\r\n\t\t\t\tthrow new Error(\"summary or location or attendees is empty\"); \t\r\n\t\t\t\t}\r\n\t\t\t// Update the event in the calendar\r\n\t\t\tconst response = await CalendarService.updateEvent(\r\n\t\t\t\teventId,\r\n\t\t\t\tupdatedEventData,\r\n\t\t\t);\r\n\r\n\r\n\t\t\t// Send success response with updated event details\r\n\t\t\tres.send({\r\n\t\t\t\tmsg: \"Event updated successfully\",\r\n\t\t\t\tupdatedEvent: response,\r\n\t\t\t});\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(\"Error updating event:\", error.message);\r\n\t\t\tres.status(500).send(\"Internal Server Error\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Handle deleting an existing event\r\n\tpublic static async deleteEvent(req: Request, res: Response) {\r\n\t\ttry {\r\n\t\t\t// Retrieve event ID from request parameters\r\n\t\t\tconst eventId:String = req.params.eventId;\r\n\r\n\t\t\t// Ensure the user is authenticated\r\n\t\t\tif (!AuthController.tokenn) throw new Error(\"User not authenticated. Please log in first..!!\");\r\n\r\n\t\t\t// Delete the event from the calendar\r\n\t\t\tconst response = await CalendarService.deleteEvent(eventId);\r\n\r\n\r\n\t\t\t// Send success response\r\n\t\t\tres.send({\r\n\t\t\t\tmsg: \"Event deleted successfully\",\r\n\t\t\t});\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(\"Error deleting event:\", error.message);\r\n\t\t\tres.status(500).send(\"Internal Server Error\");\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["EventController","scheduleEvent","req","res","eventData","body","tokens","session","AuthController","tokenn","Error","summary","location","attendees","length","response","CalendarService","insertEvent","status","send","msg","error","console","message","listEvent","listEvents","userEmail","updateEvent","eventId","params","updatedEventData","log","updatedEvent","deleteEvent"],"mappings":";;;;+BAOaA;;;eAAAA;;;iCAJiB;gCACD;AAGtB,IAAA,AAAMA,kBAAN,MAAMA;IAGZ,aAAoBC,cAAcC,GAAY,EAAEC,GAAa,EAAE;QAC9D,IAAI;YAEH,MAAMC,YAAYF,IAAIG,IAAI;YAG1B,MAAMC,SAASJ,IAAIK,OAAO,CAACD,MAAM;YACjC,IAAI,CAACE,8BAAc,CAACC,MAAM,EAAE,MAAM,IAAIC,MAAM;YAC5C,IAAGN,UAAUO,OAAO,IAAE,MAAKP,UAAUQ,QAAQ,IAAE,MAAMR,UAAUS,SAAS,CAACC,MAAM,IAAE,GAAE;gBAClF,MAAM,IAAIJ,MAAM;YAChB;YAED,MAAMK,WAAW,MAAMC,gCAAe,CAACC,WAAW,CAACb;YAGnDD,IAAIe,MAAM,CAAC,KAAKC,IAAI,CAAC;gBACpBC,KAAK;YACN;QACD,EAAE,OAAOC,OAAY;YACpBC,QAAQD,KAAK,CAAC,yBAAyBA,MAAME,OAAO;YACpDpB,IAAIe,MAAM,CAAC,KAAKC,IAAI,CAAC;QACtB;IACD;IAGA,aAAoBK,UAAUtB,GAAY,EAAEC,GAAa,EAAE;QAC1D,IAAI;YAEH,MAAMG,SAASJ,IAAIK,OAAO,CAACD,MAAM;YACjC,IAAI,CAACE,8BAAc,CAACC,MAAM,EAAE,MAAM,IAAIC,MAAM;YAG5C,MAAMK,WAAW,MAAMC,gCAAe,CAACS,UAAU,CAChDjB,8BAAc,CAACkB,SAAS;YAIzBvB,IAAIgB,IAAI,CAACJ;QACV,EAAE,OAAOM,OAAY;YACpBC,QAAQD,KAAK,CAAC,wBAAwBA,MAAME,OAAO;YACnDpB,IAAIe,MAAM,CAAC,KAAKC,IAAI,CAAC;QACtB;IACD;IAGA,aAAoBQ,YAAYzB,GAAY,EAAEC,GAAa,EAAE;QAC5D,IAAI;YAEH,MAAMyB,UAAiB1B,IAAI2B,MAAM,CAACD,OAAO;YAGzC,MAAME,mBAA6B5B,IAAIG,IAAI;YAC3CiB,QAAQS,GAAG,CAACD;YAGZ,MAAMxB,SAASJ,IAAIK,OAAO,CAACD,MAAM;YACjC,IAAI,CAACE,8BAAc,CAACC,MAAM,EAAE,MAAM,IAAIC,MAAM;YAC5C,IAAGoB,iBAAiBnB,OAAO,IAAE,MAAKmB,iBAAiBlB,QAAQ,IAAE,MAAMkB,iBAAiBjB,SAAS,CAACC,MAAM,IAAE,GAAE;gBACvG,MAAM,IAAIJ,MAAM;YAChB;YAED,MAAMK,WAAW,MAAMC,gCAAe,CAACW,WAAW,CACjDC,SACAE;YAKD3B,IAAIgB,IAAI,CAAC;gBACRC,KAAK;gBACLY,cAAcjB;YACf;QACD,EAAE,OAAOM,OAAY;YACpBC,QAAQD,KAAK,CAAC,yBAAyBA,MAAME,OAAO;YACpDpB,IAAIe,MAAM,CAAC,KAAKC,IAAI,CAAC;QACtB;IACD;IAGA,aAAoBc,YAAY/B,GAAY,EAAEC,GAAa,EAAE;QAC5D,IAAI;YAEH,MAAMyB,UAAiB1B,IAAI2B,MAAM,CAACD,OAAO;YAGzC,IAAI,CAACpB,8BAAc,CAACC,MAAM,EAAE,MAAM,IAAIC,MAAM;YAG5C,MAAMK,WAAW,MAAMC,gCAAe,CAACiB,WAAW,CAACL;YAInDzB,IAAIgB,IAAI,CAAC;gBACRC,KAAK;YACN;QACD,EAAE,OAAOC,OAAY;YACpBC,QAAQD,KAAK,CAAC,yBAAyBA,MAAME,OAAO;YACpDpB,IAAIe,MAAM,CAAC,KAAKC,IAAI,CAAC;QACtB;IACD;AACD"}