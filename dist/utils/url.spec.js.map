{"version":3,"sources":["../../src/utils/url.spec.ts"],"sourcesContent":["import request from 'supertest';\r\nimport App from '../app';\r\nimport UrlRoute from '../routes/url.route';\r\nimport UrlModel from '../models/url.model';\r\n\r\ndescribe('URL Routes', () => {\r\n  let app: App;\r\n\r\n  beforeAll(() => {\r\n    app = new App([new UrlRoute()]);\r\n  });\r\n\r\n  // Test case for creating short URLs\r\n  describe('POST /short', () => {\r\n    it('should create a short URL', async () => {\r\n      const response = await request(app.getServer())\r\n        .post('/short')\r\n        .send({\r\n          original_url: 'https://example.com',\r\n          expiration_date: '2023-12-31',\r\n          title: 'Test URL',\r\n          description: 'Test URL Description',\r\n        });\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body).toHaveProperty('short_url');\r\n    },10000);\r\n\r\n    it('should return 400 for invalid URL format', async () => {\r\n      const response = await request(app.getServer())\r\n        .post('/short')\r\n        .send({\r\n          original_url: 'invalid-url',\r\n        });\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(response.body).toHaveProperty('error', 'Invalid URL format');\r\n    });\r\n\r\n  });\r\n\r\n  // Test case for getting short URLs by app_id\r\n  describe('GET /appid', () => {\r\n    it('should get short URLs by app_id', async () => {\r\n      // Assuming you have a valid app_id to test with\r\n      const response = await request(app.getServer())\r\n        .get('/appid')\r\n        .query({ page: 1 });\r\n\r\n      expect(response.status).toBe(200);\r\n      // Add more assertions based on your expected response\r\n    });\r\n\r\n    // Add more test cases for different scenarios\r\n  });\r\n\r\n  // Test case for deleting short URL by shortId\r\n  describe('DELETE /delete/:shortId', () => {\r\n    let createdUrlId;\r\n    beforeEach(async () => {\r\n      // Clear the database or perform any setup before each test\r\n      await UrlModel.deleteMany({});\r\n  \r\n      // Create a mock document for testing deletion\r\n      const mockData = {\r\n        original_url: 'http://example.com',\r\n        short_id: 'validShortId',\r\n        short_url: 'http://your-short-url.com/validShortId',\r\n        expiration_date: null,\r\n        starting_date: new Date(),\r\n        app_id: null,\r\n        title: 'Mock Title',\r\n        description: 'Mock Description',\r\n        status: 'active',\r\n        stats: { total_visitor: 0 },\r\n      };\r\n  \r\n      const createdUrl = await UrlModel.create(mockData);\r\n      createdUrlId = createdUrl._id;\r\n    });\r\n  \r\n    it('should delete a short URL', async () => {\r\n      // Assuming you have a valid shortId to test with\r\n      const response = await request(app.getServer())\r\n        .delete('/delete/validShortId');\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(response.body).toHaveProperty('success', true);\r\n    });\r\n\r\n    it('should return 404 for non-existing shortId', async () => {\r\n      const response = await request(app.getServer())\r\n        .delete('/delete/nonExistingShortId');\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message', 'URL not found');\r\n    });\r\n\r\n  });\r\n\r\n  describe('PUT /update/:shortId', () => {\r\n    let createdUrlId;\r\n    beforeEach(async () => {\r\n      // Clear the database or perform any setup before each test\r\n      await UrlModel.deleteMany({});\r\n  \r\n      // Create a mock document for testing updates\r\n      const mockData = {\r\n        original_url: 'http://example.com',\r\n        short_id: 'validShortId',\r\n        short_url: 'http://your-short-url.com/validShortId',\r\n        expiration_date: null,\r\n        starting_date: new Date(),\r\n        app_id: null,\r\n        title: 'Mock Title',\r\n        description: 'Mock Description',\r\n        status: 'active',\r\n        stats: { total_visitor: 0 },\r\n      };\r\n  \r\n      const createdUrl = await UrlModel.create(mockData);\r\n      createdUrlId = createdUrl.short_id;\r\n    });\r\n  \r\n    it('should update a short URL', async () => {\r\n      const updatedData = {\r\n        expiration_date: '2023-12-31',\r\n        title: 'Updated Title',\r\n        description: 'Updated Description',\r\n      };\r\n\r\n      const response = await request(app.getServer())\r\n        .put(`/update/${createdUrlId}`)\r\n        .send(updatedData);\r\n\r\n      expect(response.status).toBe(200);\r\n      \r\n    });\r\n\r\n    it('should return 404 for non-existing shortId', async () => {\r\n      const response = await request(app.getServer())\r\n        .put('/update/nonExistingShortId')\r\n        .send({ expiration_date: '2023-12-31' });\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body).toHaveProperty('error', 'URL not found');\r\n    });\r\n\r\n});\r\n\r\ndescribe('GET /:shortId', () => {\r\n    let createdUrlId;\r\n    beforeEach(async () => {\r\n      // Clear the database or perform any setup before each test\r\n      await UrlModel.deleteMany({});\r\n  \r\n      // Create a mock document for testing redirection\r\n      const mockData = {\r\n        original_url: 'http://example.com',\r\n        short_id: 'validShortId',\r\n        short_url: 'http://your-short-url.com/validShortId',\r\n        expiration_date: null,\r\n        starting_date: new Date(),\r\n        app_id: null,\r\n        title: 'Mock Title',\r\n        description: 'Mock Description',\r\n        status: 'active',\r\n        stats: { total_visitor: 0 },\r\n      };\r\n  \r\n      const createdUrl = await UrlModel.create(mockData);\r\n      createdUrlId = createdUrl.short_id;\r\n    });\r\n  \r\n    it('should redirect to the original URL', async () => {\r\n      const response = await request(app.getServer())\r\n        .get(`/${createdUrlId}`);\r\n\r\n      expect(response.status).toBe(302); // Assuming a redirect status code\r\n      expect(response.headers.location).toBe('http://example.com');\r\n    });\r\n\r\n    it('should return 404 for non-existing shortId', async () => {\r\n      const response = await request(app.getServer())\r\n        .get('/nonExistingShortId');\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(response.body).toHaveProperty('error', 'URL not found');\r\n    });\r\n\r\n    \r\n});\r\n\r\n\r\n  afterAll(() => {\r\n    // Cleanup or close any resources if needed\r\n  });\r\n});\r\n\r\n"],"names":["describe","app","beforeAll","App","UrlRoute","it","response","request","getServer","post","send","original_url","expiration_date","title","description","expect","status","toBe","body","toHaveProperty","get","query","page","createdUrlId","beforeEach","UrlModel","deleteMany","mockData","short_id","short_url","starting_date","Date","app_id","stats","total_visitor","createdUrl","create","_id","delete","updatedData","put","headers","location","afterAll"],"mappings":"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"}