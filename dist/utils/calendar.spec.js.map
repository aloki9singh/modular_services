{"version":3,"sources":["../../src/utils/calendar.spec.ts"],"sourcesContent":["import request from 'supertest';\r\nimport App from '../app';\r\nimport EventRoutes from '../routes/EventRoutes';\r\nimport {AuthController} from \"../controllers/auth.controller\"\r\n\r\n\r\n\r\nlet eventId:string;\r\n\r\ndescribe('URL Routes', () => {\r\n  let app: App;\r\n\r\n  var userTestStatus: Array<{ \r\n    summary: string,\r\n    description:string,\r\n    startDateTime:string,\r\n    endDateTime: string,\r\n    location: string,\r\n    attendees:Array<{email:string}>\r\n  }>=\r\n  [\r\n    { \r\n     summary: \"\",\r\n   description: \"Test case 11\",\r\n   startDateTime:\"2023-12-30T13:45:00.000Z\",\r\n   endDateTime: \"2023-12-30T14:45:00.000Z\",\r\n   location: \"Delhi\",\r\n    attendees: [{email:\"rajgupta74434@gmail.com\"}]\r\n    }\r\n    ,\r\n    {\r\n   summary: \"Test case 12\",\r\n   description: \"Test case 12\",\r\n   startDateTime:\"\",\r\n   endDateTime: \"2023-12-30T15:45:00.000Z\",\r\n   location: \"Delhi\",\r\n   attendees: [{email:\"rajgupta74434@gmail.com\"}]\r\n    }\r\n    ,\r\n    {\r\n     summary: \"Test case 13\",\r\n     description: \"Test case 13\",\r\n     startDateTime:\"2023-12-30T05:45:00.000Z\",\r\n     endDateTime: \"\",\r\n     location: \"Delhi\",\r\n     attendees: [{email:\"rajgupta74434@gmail.com\"}]\r\n    }\r\n     ,\r\n    {\r\n       summary: \"Test case 14\",\r\n       description: \"Test case 14\",\r\n       startDateTime:\"2023-12-30T08:45:00.000Z\",\r\n       endDateTime: \"2023-12-30T09:45:00.000Z\",\r\n       location: \"\",\r\n       attendees: [{email:\"rajgupta74434@gmail.com\"}]\r\n    }\r\n     ,\r\n    {\r\n       summary: \"Test case 15\",\r\n       description: \"Test case 15\",\r\n       startDateTime:\"2023-12-30T10:45:00.000Z\",\r\n       endDateTime: \"2023-12-30T11:45:00.000Z\",\r\n       location: \"Delhi\",\r\n       attendees: []\r\n    }\r\n     \r\n    ]\r\n\r\n\r\n\r\n  beforeAll(() => {\r\n    app = new App([new EventRoutes()]);\r\n    AuthController.tokenn  // enter access tocken here\r\n \r\n  });\r\n\r\n  \r\n  describe('Get /tests', () => {\r\n\r\n    describe('POST /schedule_event', () => {\r\n      it('should create a event ', async () => {\r\n        const response = await request(app.getServer())\r\n          .post('/event/schedule_event')\r\n          .send({\r\n          summary: \"Test case 4\",\r\n\t\t\t\t\tdescription: \"Test case 4\",\r\n\t\t\t\t\tstartDateTime:\"2023-12-30T11:45:00.000Z\",\r\n\t\t\t\t\tendDateTime: \"2023-12-30T12:45:00.000Z\",\r\n\t\t\t\t\tlocation: \"Delhi\",\r\n\t\t\t\t\tattendees: [{email:\"rajgupta74434@gmail.com\"},{email:\"officialsiddharthbisht@gmail.com\"}],\r\n          });  \r\n        expect(response.status).toBe(201);\r\n      },10000);\r\n\r\n      it('should create a event with out description and in location we have link of zoom', async () => {\r\n        const response = await request(app.getServer())\r\n          .post('/event/schedule_event')\r\n          .send({\r\n          summary: \"Test case 5\",\r\n\t\t\t\t\tdescription: \"\",\r\n\t\t\t\t\tstartDateTime:\"2023-12-30T11:45:00.000Z\",\r\n\t\t\t\t\tendDateTime: \"2023-12-30T12:45:00.000Z\",\r\n\t\t\t\t\tlocation: \"https://zoom-lecture-recordings.s3.ap-south-1.amazonaws.com/82140017955/gai201_b30_daily_lectures_1698040260000\",\r\n\t\t\t\t\tattendees: [{email:\"rajgupta74434@gmail.com\"}],\r\n          });\r\n        expect(response.status).toBe(201);\r\n      },10000);\r\n\r\n      userTestStatus.forEach((input,index)=>{\r\n        it(`should not create a event with  ${index}  and gives 500 response code `, async () => {  \r\n            const response = await request(app.getServer())\r\n            .post('/event/schedule_event')\r\n            .send(input);\r\n            expect(response.status).toBe(500);\r\n            console.log(\"yes\")\r\n          },20000);\r\n      })\r\n      \r\n    });\r\n\r\n    describe('GET /list-events/:email', () => {\r\n        it('should show list of events', async () => {\r\n          const response = await request(app.getServer())\r\n          .get('/event/list-events/email')\r\n           eventId=response._body[0].eventId\r\n          expect(response.status).toBe(200);\r\n        },10000);\r\n        \r\n      });\r\n\r\n    describe('UPDATE event/update-event/:eventId', () => {\r\n        it('should update the event', async () => {\r\n          const response = await request(app.getServer())\r\n            .post(`/event/update-event/${eventId}`)\r\n            .send({\r\n            summary: \"Test case updated\",\r\n            description: \"Test case updated\",\r\n            startDateTime:\"2023-12-30T11:45:00.000Z\",\r\n            endDateTime: \"2023-12-30T12:45:00.000Z\",\r\n            location: \"Delhi\",\r\n            attendees: [{email:\"rajgupta74434@gmail.com\"}],\r\n            });     \r\n          expect(response.status).toBe(200);  \r\n        },10000);\r\n\r\n        it('should not update event because wrong eventId is sent', async () => {\r\n          const response = await request(app.getServer())\r\n            .post(`/event/update-event/000`)\r\n            .send({\r\n            summary: \"Test case updated\",\r\n            description: \"Test case updated\",\r\n            startDateTime:\"2023-12-30T11:45:00.000Z\",\r\n            endDateTime: \"2023-12-30T12:45:00.000Z\",\r\n            location: \"Delhi\",\r\n            attendees: [{email:\"rajgupta74434@gmail.com\"}],\r\n            });   \r\n          expect(response.status).toBe(500);    \r\n        },10000);\r\n\r\n        userTestStatus.forEach((input,index)=>{\r\n          it(`should not create a event with  ${index} index test case  and gives 500 response code `, async () => {  \r\n              const response = await request(app.getServer())\r\n              .post(`/event/update-event/${eventId}`)\r\n              .send(input);\r\n              expect(response.status).toBe(500);\r\n             \r\n            },20000);\r\n        })\r\n\r\n      });\r\n    \r\n    describe('DELETE event/delete-event/:eventId', () => {\r\n        it('should delete the event', async () => {\r\n          const response = await request(app.getServer())\r\n          .get(`/event/delete-event/${eventId}`)       \r\n          expect(response.status).toBe(200);        \r\n        },10000);\r\n\r\n        it('should not delete any event because wrong event id is sent', async () => {\r\n          const response = await request(app.getServer())\r\n          .get(`/event/delete-event/000}`)   \r\n          expect(response.status).toBe(500);\r\n        },10000);\r\n        \r\n      });\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    })\r\n\r\n    \r\n});\r\n"],"names":["eventId","describe","app","userTestStatus","summary","description","startDateTime","endDateTime","location","attendees","email","beforeAll","App","EventRoutes","AuthController","tokenn","it","response","request","getServer","post","send","expect","status","toBe","forEach","input","index","console","log","get","_body"],"mappings":"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"}