{"version":3,"sources":["../../src/utils/log.spec.ts"],"sourcesContent":["import request from 'supertest';\r\nimport App from '../app';\r\nimport LogRoute from '../routes/log.route';\r\nimport LogModel from '../models/log.model';\r\nimport UrlModel from '../models/url.model';\r\n\r\n// Mocking the models to avoid actual database calls\r\njest.mock('../models/log.model');\r\njest.mock('../models/url.model');\r\n\r\n// Test suite for the LogController\r\ndescribe('LogController', () => {\r\n  let app: App;\r\n\r\n  // Setting up the App instance with LogRoute\r\n  beforeAll(() => {\r\n    app = new App([new LogRoute()]);\r\n  });\r\n\r\n  // Clearing all mocks after each test\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  // Test suite for the GET /log/:short_id endpoint\r\n  describe('GET /log/:short_id', () => {\r\n    // Test case: it should get URL analytics\r\n    it('should get URL analytics', async () => {\r\n      // Mock data for URL details\r\n      const urlDetailsMock = {\r\n        _id: 'mock-url-id',\r\n        original_url: 'https://example.com',\r\n        short_id: 'mockShortId',\r\n        expiration_date: null,\r\n        starting_date: new Date(),\r\n        title: 'Mock Title',\r\n        description: 'Mock Description',\r\n        status: 'active',\r\n      };\r\n\r\n      // Mock data for access logs\r\n      const accessLogsMock = [\r\n        {\r\n          _id: 'mock-log-id',\r\n          url_id: 'mock-url-id',\r\n          ip_address: '127.0.0.1',\r\n          visit_time: new Date(),\r\n          referrer: 'http://referrer.com',\r\n        },\r\n        // Add more mock log entries as needed\r\n      ];\r\n\r\n      // Mocking the URLModel.findOne and LogModel.find methods\r\n      (UrlModel.findOne as jest.Mock).mockResolvedValueOnce(urlDetailsMock);\r\n      (LogModel.find as jest.Mock).mockResolvedValueOnce(accessLogsMock);\r\n\r\n      // Making a request to the endpoint\r\n      const response = await request(app.getServer())\r\n        .get('/log/mockShortId');\r\n\r\n      // Assertions for the response\r\n      expect(response.status).toBe(200);\r\n      // Add more assertions based on your expected response format or data\r\n    });\r\n\r\n    // Test case: it should return 404 for non-existing short_id\r\n    it('should return 404 for non-existing short_id', async () => {\r\n      // Mocking that URLModel.findOne returns null for non-existing short_id\r\n      (UrlModel.findOne as jest.Mock).mockResolvedValueOnce(null);\r\n\r\n      // Making a request to the endpoint with a non-existing short_id\r\n      const response = await request(app.getServer())\r\n        .get('/log/nonExistingShortId');\r\n\r\n      // Assertions for the response\r\n      expect(response.status).toBe(404);\r\n      expect(response.body).toHaveProperty('error', 'URL not found');\r\n    });\r\n  });\r\n\r\n  // Test suite for the GET /log/visitors/:short_id endpoint\r\n  describe('GET /log/visitors/:short_id', () => {\r\n    // Test case: it should get all visitors information\r\n    it('should get all visitors information', async () => {\r\n      // Mock data for URL details\r\n      const urlDetailsMock = {\r\n        _id: 'mock-url-id',\r\n        original_url: 'https://example.com',\r\n        short_id: 'mockShortId',\r\n        expiration_date: null,\r\n        starting_date: new Date(),\r\n        title: 'Mock Title',\r\n        description: 'Mock Description',\r\n        status: 'active',\r\n      };\r\n\r\n      // Mock data for access logs\r\n      const accessLogsMock = [\r\n        {\r\n          _id: 'mock-log-id',\r\n          url_id: 'mock-url-id',\r\n          ip_address: '127.0.0.1',\r\n          visit_time: new Date(),\r\n          referrer: 'http://referrer.com',\r\n        },\r\n        // Add more mock log entries as needed\r\n      ];\r\n\r\n      // Mocking the URLModel.findOne and LogModel.find methods\r\n      (UrlModel.findOne as jest.Mock).mockResolvedValueOnce(urlDetailsMock);\r\n      (LogModel.find as jest.Mock).mockReturnValueOnce({\r\n        skip: jest.fn().mockReturnThis(),\r\n        limit: jest.fn().mockReturnThis(),\r\n        exec: jest.fn().mockResolvedValueOnce(accessLogsMock),\r\n      });\r\n\r\n      // Making a request to the endpoint\r\n      const response = await request(app.getServer())\r\n        .get('/log/visitors/mockShortId');\r\n\r\n      // Assertions for the response\r\n      expect(response.status).toBe(200);\r\n      // Add more assertions based on your expected response format or data\r\n    });\r\n\r\n    // Test case: it should return 404 for non-existing short_id\r\n    it('should return 404 for non-existing short_id', async () => {\r\n      // Mocking that URLModel.findOne returns null for non-existing short_id\r\n      (UrlModel.findOne as jest.Mock).mockResolvedValueOnce(null);\r\n\r\n      // Making a request to the endpoint with a non-existing short_id\r\n      const response = await request(app.getServer())\r\n        .get('/log/visitors/nonExistingShortId');\r\n\r\n      // Assertions for the response\r\n      expect(response.status).toBe(404);\r\n      expect(response.body).toHaveProperty('error', 'URL not found');\r\n    });\r\n  });\r\n\r\n  // Cleanup or close any resources if needed\r\n  afterAll(() => {});\r\n});\r\n"],"names":["jest","mock","describe","app","beforeAll","App","LogRoute","afterEach","clearAllMocks","it","urlDetailsMock","_id","original_url","short_id","expiration_date","starting_date","Date","title","description","status","accessLogsMock","url_id","ip_address","visit_time","referrer","UrlModel","findOne","mockResolvedValueOnce","LogModel","find","response","request","getServer","get","expect","toBe","body","toHaveProperty","mockReturnValueOnce","skip","fn","mockReturnThis","limit","exec","afterAll"],"mappings":";;;;oDAAoB;8CACJ;mDACK;mDACA;mDACA;;;;;;AAGrBA,KAAKC,IAAI,CAAC;AACVD,KAAKC,IAAI,CAAC;AAGVC,SAAS,iBAAiB;IACxB,IAAIC;IAGJC,UAAU;QACRD,MAAM,IAAIE,YAAG,CAAC;YAAC,IAAIC,iBAAQ;SAAG;IAChC;IAGAC,UAAU;QACRP,KAAKQ,aAAa;IACpB;IAGAN,SAAS,sBAAsB;QAE7BO,GAAG,4BAA4B;YAE7B,MAAMC,iBAAiB;gBACrBC,KAAK;gBACLC,cAAc;gBACdC,UAAU;gBACVC,iBAAiB;gBACjBC,eAAe,IAAIC;gBACnBC,OAAO;gBACPC,aAAa;gBACbC,QAAQ;YACV;YAGA,MAAMC,iBAAiB;gBACrB;oBACET,KAAK;oBACLU,QAAQ;oBACRC,YAAY;oBACZC,YAAY,IAAIP;oBAChBQ,UAAU;gBACZ;aAED;YAGAC,iBAAQ,CAACC,OAAO,CAAeC,qBAAqB,CAACjB;YACrDkB,iBAAQ,CAACC,IAAI,CAAeF,qBAAqB,CAACP;YAGnD,MAAMU,WAAW,MAAMC,IAAAA,kBAAO,EAAC5B,IAAI6B,SAAS,IACzCC,GAAG,CAAC;YAGPC,OAAOJ,SAASX,MAAM,EAAEgB,IAAI,CAAC;QAE/B;QAGA1B,GAAG,+CAA+C;YAE/CgB,iBAAQ,CAACC,OAAO,CAAeC,qBAAqB,CAAC;YAGtD,MAAMG,WAAW,MAAMC,IAAAA,kBAAO,EAAC5B,IAAI6B,SAAS,IACzCC,GAAG,CAAC;YAGPC,OAAOJ,SAASX,MAAM,EAAEgB,IAAI,CAAC;YAC7BD,OAAOJ,SAASM,IAAI,EAAEC,cAAc,CAAC,SAAS;QAChD;IACF;IAGAnC,SAAS,+BAA+B;QAEtCO,GAAG,uCAAuC;YAExC,MAAMC,iBAAiB;gBACrBC,KAAK;gBACLC,cAAc;gBACdC,UAAU;gBACVC,iBAAiB;gBACjBC,eAAe,IAAIC;gBACnBC,OAAO;gBACPC,aAAa;gBACbC,QAAQ;YACV;YAGA,MAAMC,iBAAiB;gBACrB;oBACET,KAAK;oBACLU,QAAQ;oBACRC,YAAY;oBACZC,YAAY,IAAIP;oBAChBQ,UAAU;gBACZ;aAED;YAGAC,iBAAQ,CAACC,OAAO,CAAeC,qBAAqB,CAACjB;YACrDkB,iBAAQ,CAACC,IAAI,CAAeS,mBAAmB,CAAC;gBAC/CC,MAAMvC,KAAKwC,EAAE,GAAGC,cAAc;gBAC9BC,OAAO1C,KAAKwC,EAAE,GAAGC,cAAc;gBAC/BE,MAAM3C,KAAKwC,EAAE,GAAGb,qBAAqB,CAACP;YACxC;YAGA,MAAMU,WAAW,MAAMC,IAAAA,kBAAO,EAAC5B,IAAI6B,SAAS,IACzCC,GAAG,CAAC;YAGPC,OAAOJ,SAASX,MAAM,EAAEgB,IAAI,CAAC;QAE/B;QAGA1B,GAAG,+CAA+C;YAE/CgB,iBAAQ,CAACC,OAAO,CAAeC,qBAAqB,CAAC;YAGtD,MAAMG,WAAW,MAAMC,IAAAA,kBAAO,EAAC5B,IAAI6B,SAAS,IACzCC,GAAG,CAAC;YAGPC,OAAOJ,SAASX,MAAM,EAAEgB,IAAI,CAAC;YAC7BD,OAAOJ,SAASM,IAAI,EAAEC,cAAc,CAAC,SAAS;QAChD;IACF;IAGAO,SAAS,KAAO;AAClB"}