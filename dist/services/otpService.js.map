{"version":3,"sources":["../../src/services/otpService.ts"],"sourcesContent":["import twilio from \"twilio\";\r\nimport OtpModel from \"../models/otp.model\";\r\nimport {OtpDocument} from \"../interfaces/otp.interface\";\r\n\r\nclass OtpService {\r\n\tprivate readonly client: twilio.Twilio;\r\n\tprivate readonly MAX_FAILED_ATTEMPTS = 5;\r\n\tprivate readonly LOCKOUT_DURATION_MINUTES = 15;\r\n\r\n\tconstructor() {\r\n\t\tconst accountSid: string = process.env.TWILIO_ACCOUNT_SID || \"\";\r\n\t\tconst authToken: string = process.env.TWILIO_AUTH_TOKEN || \"\";\r\n\r\n\t\tif (!accountSid || !authToken) {\r\n\t\t\tconst errorMessage = \"Twilio credentials not provided.\";\r\n\t\t\tconsole.error(errorMessage);\r\n\t\t\tthrow new Error(errorMessage);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.client = twilio(accountSid, authToken);\r\n\t\t} catch (error) {\r\n\t\t\tconst errorMessage = \"Failed to initialize Twilio client.\";\r\n\t\t\tconsole.error(`${errorMessage} ${error}`);\r\n\t\t\tthrow new Error(errorMessage);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic generateOtp = async (identifier: string): Promise<any> => {\r\n\t\t// Implementation for generating OTP\r\n\r\n\t\t// Example implementation:\r\n\t\tconst otp = Math.floor(100000 + Math.random() * 900000);\r\n\r\n\t\t// Example implementation for sending OTP via Twilio\r\n\t\tconst message = await this.client.messages.create({\r\n\t\t\tbody: `Your OTP is: ${otp}`,\r\n\t\t\tto: `+91${identifier}`,\r\n\t\t\tfrom: process.env.TWILIO_MOBILE || \"\",\r\n\t\t});\r\n\r\n\t\t// Example implementation for saving OTP to the database\r\n\t\t// Modify this based on your actual database model and structure\r\n\t\tconst otpRecord: OtpDocument | null = await OtpModel.findOne({\r\n\t\t\tidentifier,\r\n\t\t});\r\n\r\n\t\tif (otpRecord) {\r\n\t\t\t// Update existing OTP record\r\n\t\t\totpRecord.passwords.push({\r\n\t\t\t\tcode: otp,\r\n\t\t\t\texpiresAt: new Date(Date.now() + 5 * 60 * 1000),\r\n\t\t\t\tverified: false,\r\n\t\t\t\trequestedAt: new Date(),\r\n\t\t\t\tserviceProvider: \"\",\r\n\t\t\t\tserviceProviderResponse: undefined,\r\n\t\t\t});\r\n\t\t\totpRecord.failedAttempts = 0;\r\n\t\t\tawait otpRecord.save();\r\n\t\t} else {\r\n\t\t\t// Create a new OTP record for the user\r\n\t\t\tconst sendOTP = new OtpModel({\r\n\t\t\t\tidentifier,\r\n\t\t\t\tpasswords: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcode: otp,\r\n\t\t\t\t\t\texpiresAt: new Date(Date.now() + 5 * 60 * 1000),\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t\tfailedAttempts: 0,\r\n\t\t\t});\r\n\t\t\tawait sendOTP.save();\r\n\t\t}\r\n\r\n\t\tconsole.log(\"OTP sent successfully:\", message.sid);\r\n\r\n\t\treturn {\r\n\t\t\tmessage: \"OTP sent successfully\",\r\n\t\t\totpSid: message.sid,\r\n\t\t\tsuccess: true,\r\n\t\t\tstatusCode: 200,\r\n\t\t};\r\n\t};\r\n\r\n\t// Method to verify the user-entered OTP\r\n\tpublic verifyOtp = async (\r\n\t\tidentifier: string,\r\n\t\tuserEnteredOTP: number,\r\n\t): Promise<any> => {\r\n\t\t// Implementation for verifying OTP\r\n\r\n\t\t// Example implementation:\r\n\t\tconst otpRecord: OtpDocument | null = await OtpModel.findOne({\r\n\t\t\tidentifier,\r\n\t\t});\r\n\r\n\t\t// Example implementation for handling OTP verification\r\n\t\t// Modify this based on your actual verification logic\r\n\t\tif (\r\n\t\t\t!otpRecord ||\r\n\t\t\t!otpRecord.passwords ||\r\n\t\t\totpRecord.passwords.length === 0\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\terror: \"OTP not found\",\r\n\t\t\t\tmessage: \"Please generate a new OTP.\",\r\n\t\t\t\tstatusCode: 404,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Check if the user is locked out due to too many failed attempts\r\n\t\tif (otpRecord.failedAttempts >= this.MAX_FAILED_ATTEMPTS) {\r\n\t\t\tconst lockoutEndTime = new Date(otpRecord.lockoutUntil || \"\");\r\n\r\n\t\t\tif (lockoutEndTime > new Date()) {\r\n\t\t\t\tconst remainingLockoutTime = Math.ceil(\r\n\t\t\t\t\t(lockoutEndTime.getTime() - new Date().getTime()) /\r\n\t\t\t\t\t(this.LOCKOUT_DURATION_MINUTES * 60 * 1000),\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\terror: \"Account locked\",\r\n\t\t\t\t\tmessage: `Too many failed attempts. Try again after ${remainingLockoutTime} minutes.`,\r\n\t\t\t\t\tstatusCode: 403,\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\totpRecord.failedAttempts = 0;\r\n\t\t\t\totpRecord.lockoutUntil = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst latestOTP = otpRecord.passwords.slice(-1)[0];\r\n\r\n\t\tif (latestOTP.verified) {\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\terror: \"Invalid OTP\",\r\n\t\t\t\tmessage: \"This OTP has already been used.\",\r\n\t\t\t\tstatusCode: 400,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst expirationTime = new Date(\r\n\t\t\tlatestOTP.expiresAt.getTime() +\r\n\t\t\tthis.LOCKOUT_DURATION_MINUTES * 60 * 1000,\r\n\t\t);\r\n\r\n\t\tif (expirationTime < new Date()) {\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\terror: \"OTP expired\",\r\n\t\t\t\tmessage: \"Please generate a new OTP.\",\r\n\t\t\t\tstatusCode: 400,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (latestOTP.code === userEnteredOTP) {\r\n\t\t\tlatestOTP.verified = true;\r\n\t\t\totpRecord.failedAttempts = 0;\r\n\t\t\totpRecord.lockoutUntil = null;\r\n\t\t} else {\r\n\t\t\totpRecord.failedAttempts += 1;\r\n\r\n\t\t\tif (otpRecord.failedAttempts >= this.MAX_FAILED_ATTEMPTS) {\r\n\t\t\t\totpRecord.lockoutUntil = new Date(\r\n\t\t\t\t\tDate.now() + this.LOCKOUT_DURATION_MINUTES * 60 * 1000,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tawait otpRecord.save();\r\n\r\n\t\tif (latestOTP.verified) {\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tmessage: \"OTP verified successfully\",\r\n\t\t\t\tstatusCode: 200,\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tconst response = {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\terror: \"Invalid OTP\",\r\n\t\t\t\tmessage: \"Please enter a valid OTP.\",\r\n\t\t\t\tlockout: null as { until: Date; remainingTime: number } | null,\r\n\t\t\t\tstatusCode: 400,\r\n\t\t\t};\r\n\r\n\t\t\tif (otpRecord.lockoutUntil) {\r\n\t\t\t\tconst remainingLockoutTime = Math.ceil(\r\n\t\t\t\t\t(otpRecord.lockoutUntil.getTime() - new Date().getTime()) /\r\n\t\t\t\t\t(60 * 1000),\r\n\t\t\t\t);\r\n\t\t\t\tresponse.lockout = {\r\n\t\t\t\t\tuntil: otpRecord.lockoutUntil,\r\n\t\t\t\t\tremainingTime: remainingLockoutTime,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn response;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport default OtpService;\r\n"],"names":["OtpService","constructor","client","MAX_FAILED_ATTEMPTS","LOCKOUT_DURATION_MINUTES","generateOtp","identifier","otp","Math","floor","random","message","messages","create","body","to","from","process","env","TWILIO_MOBILE","otpRecord","OtpModel","findOne","passwords","push","code","expiresAt","Date","now","verified","requestedAt","serviceProvider","serviceProviderResponse","undefined","failedAttempts","save","sendOTP","console","log","sid","otpSid","success","statusCode","verifyOtp","userEnteredOTP","length","error","lockoutEndTime","lockoutUntil","remainingLockoutTime","ceil","getTime","latestOTP","slice","expirationTime","response","lockout","until","remainingTime","accountSid","TWILIO_ACCOUNT_SID","authToken","TWILIO_AUTH_TOKEN","errorMessage","Error","twilio"],"mappings":"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"}