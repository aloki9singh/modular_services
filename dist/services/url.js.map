{"version":3,"sources":["../../src/services/url.ts"],"sourcesContent":["import URL from \"../models/url.model\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n//Finding existing URLs\r\nconst findExistingURL = async (original_url: string) => {\r\n\treturn await URL.findOne({ original_url });\r\n};\r\n\r\n//Generating Unique ShortID\r\nconst generateUniqueShortID = (): string => {\r\n\tconst uuid = uuidv4();\r\n\tconst base64 = Buffer.from(uuid).toString(\"base64\");\r\n\tconst shortID = base64\r\n\t\t.replace(/[+/=-_*&^%$#@!`~:;\"',|<.>?]/g, \"\")\r\n\t\t.substring(0, 6);\r\n\treturn shortID;\r\n};\r\n\r\n//Creating new Expiration Dates\r\nconst getExpirationDate = (expiration_date: string | undefined | null) => {\r\n\tif (expiration_date) {\r\n\t\t// Set expiration_date to the end of the day\r\n\t\tconst date = new Date(expiration_date);\r\n\t\tdate.setHours(23, 59, 59, 999);\r\n\t\treturn date;\r\n\t}\r\n\treturn null;\r\n};\r\n\r\n//Creating New url in database\r\nconst createNewURL = (\r\n\toriginal_url: string,\r\n\tshort_id: string,\r\n\texpirationDate: string | undefined | null | Date,\r\n\ttitle: string | undefined,\r\n\tdescription: string | undefined,\r\n) => {\r\n\t// Check if the URL has expired\r\n\tconst isExpired = expirationDate && new Date(expirationDate) < new Date();\r\n\r\n\tconst SHORT_URL_DOMAIN: string = process.env.SHORT_URL_DOMAIN;\r\n\tconst short_url = `${SHORT_URL_DOMAIN}/${short_id}`;\r\n  \r\n\treturn new URL({\r\n\t\toriginal_url,\r\n\t\tshort_id,\r\n\t\tshort_url,\r\n\t\tstarting_date: Date.now(),\r\n\t\texpiration_date: isExpired\r\n\t\t\t? new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) // 1 year from now\r\n\t\t\t: expirationDate\r\n\t\t\t  ? new Date(expirationDate)\r\n\t\t\t  : new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // Set default to 1 year if not provided\r\n\t\ttitle,\r\n\t\tdescription,\r\n\t\tstatus: isExpired ? \"expired\" : \"active\",\r\n\t});\r\n};\r\n\r\nexport {\r\n\tfindExistingURL,\r\n\tgenerateUniqueShortID,\r\n\tgetExpirationDate,\r\n\tcreateNewURL,\r\n};\r\n"],"names":["createNewURL","findExistingURL","generateUniqueShortID","getExpirationDate","original_url","URL","findOne","uuid","uuidv4","base64","Buffer","from","toString","shortID","replace","substring","expiration_date","date","Date","setHours","short_id","expirationDate","title","description","isExpired","SHORT_URL_DOMAIN","process","env","short_url","starting_date","now","status"],"mappings":";;;;;;;;;;;IA+DCA,YAAY;eAAZA;;IAHAC,eAAe;eAAfA;;IACAC,qBAAqB;eAArBA;;IACAC,iBAAiB;eAAjBA;;;mDA9De;sBACa;;;;;;AAG7B,MAAMF,kBAAkB,OAAOG;IAC9B,OAAO,MAAMC,iBAAG,CAACC,OAAO,CAAC;QAAEF;IAAa;AACzC;AAGA,MAAMF,wBAAwB;IAC7B,MAAMK,OAAOC,IAAAA,QAAM;IACnB,MAAMC,SAASC,OAAOC,IAAI,CAACJ,MAAMK,QAAQ,CAAC;IAC1C,MAAMC,UAAUJ,OACdK,OAAO,CAAC,gCAAgC,IACxCC,SAAS,CAAC,GAAG;IACf,OAAOF;AACR;AAGA,MAAMV,oBAAoB,CAACa;IAC1B,IAAIA,iBAAiB;QAEpB,MAAMC,OAAO,IAAIC,KAAKF;QACtBC,KAAKE,QAAQ,CAAC,IAAI,IAAI,IAAI;QAC1B,OAAOF;IACR;IACA,OAAO;AACR;AAGA,MAAMjB,eAAe,CACpBI,cACAgB,UACAC,gBACAC,OACAC;IAGA,MAAMC,YAAYH,kBAAkB,IAAIH,KAAKG,kBAAkB,IAAIH;IAEnE,MAAMO,mBAA2BC,QAAQC,GAAG,CAACF,gBAAgB;IAC7D,MAAMG,YAAY,CAAC,EAAEH,iBAAiB,CAAC,EAAEL,SAAS,CAAC;IAEnD,OAAO,IAAIf,iBAAG,CAAC;QACdD;QACAgB;QACAQ;QACAC,eAAeX,KAAKY,GAAG;QACvBd,iBAAiBQ,YACd,IAAIN,KAAKA,KAAKY,GAAG,KAAK,MAAM,KAAK,KAAK,KAAK,QAC3CT,iBACE,IAAIH,KAAKG,kBACT,IAAIH,KAAKA,KAAKY,GAAG,KAAK,MAAM,KAAK,KAAK,KAAK;QAChDR;QACAC;QACAQ,QAAQP,YAAY,YAAY;IACjC;AACD"}