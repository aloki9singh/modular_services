{"version":3,"sources":["../../src/services/CalendarService.ts"],"sourcesContent":["// Import necessary modules and types\r\nimport { google } from \"googleapis\";\r\nimport dayjs from 'dayjs';\r\nimport { v4 as uuid } from 'uuid';\r\nimport  {eventData}  from \"@interfaces/eventData\";\r\nimport { Myattendees } from \"@interfaces/attendees\";\r\nimport { AuthController  } from \"../controllers/auth.controller\";\r\n\r\n// Class definition for CalendarService\r\nexport class CalendarService {\r\n\t// Static property for interacting with the Google Calendar API\r\n\tprivate static calendar = google.calendar({\r\n\t\tversion: \"v3\",\r\n\t});\r\n\r\n\t// Method to insert a new event into the user's calendar\r\n\tpublic static async insertEvent(eventData: eventData) {\r\n\t\t// Create an OAuth2Client instance for handling Google OAuth2\r\n\t\tconst oAuth2Client = new google.auth.OAuth2(\r\n\t\t\tprocess.env.CLIENT_ID,\r\n\t\t\tprocess.env.CLIENT_SECRET,\r\n\t\t\tprocess.env.REDIRECT_URL\r\n\t\t);\r\n\r\n\t\t// Set OAuth2Client credentials using the tokens from the authenticated user\r\n\t\toAuth2Client.setCredentials(AuthController.tokenn);\r\n\r\n\t\t// Convert event start and end times to ISO format\r\n\t\tconst startDateTime = dayjs(eventData.startDateTime).toISOString();\r\n\t\tconst endDateTime = dayjs(eventData.endDateTime).toISOString();\r\n\t\t\tconsole.log(startDateTime ,endDateTime);\r\n\t\t\t\r\n\t\t// Insert the event into the user's calendar\r\n\t\tconst isLink = (location) => {\r\n\t\t\t// Define a regex pattern for detecting links (URLs)\r\n\t\t\tconst linkRegex = /^(http|https):\\/\\/[^ \"]+$/;\r\n\t\t  \r\n\t\t\t// Check if the location matches the link pattern\r\n\t\t\treturn linkRegex.test(location);\r\n\t\t  };\r\n\t\t  \r\n\t\t  const response = await CalendarService.calendar.events.insert({\r\n\t\t\tcalendarId: \"primary\",\r\n\t\t\tauth: oAuth2Client,\r\n\t\t\tconferenceDataVersion: 1,\r\n\t\t\tsendNotifications: true,\r\n\t\t\trequestBody: {\r\n\t\t\t  summary: eventData.summary,\r\n\t\t\t  description: eventData.description,\r\n\t\t\t  start: {\r\n\t\t\t\tdateTime: startDateTime,\r\n\t\t\t\ttimeZone: \"Asia/Kolkata\",\r\n\t\t\t  },\r\n\t\t\t  end: {\r\n\t\t\t\tdateTime: endDateTime,\r\n\t\t\t\ttimeZone: \"Asia/Kolkata\",\r\n\t\t\t  },\r\n\t\t\t  attendees: eventData.attendees,\r\n\t\t\t  ...(isLink(eventData.location)\r\n\t\t\t\t? {\r\n\t\t\t\t\tlocation: eventData.location, // Remove the location field if it's a link\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\tlocation: eventData.location,\r\n\t\t\t\t\tconferenceData: { createRequest: { requestId: uuid() } },\r\n\t\t\t\t  }),\r\n\t\t\t},\r\n\t\t  });\r\n\t\t  \r\n\r\n\t\t// Return the data of the created event\r\n\t\treturn response.data;\r\n\t}\r\n\r\n\t// Method to list upcoming events for the authenticated user\r\n\tpublic static async listEvents(userEmail: String) {\r\n\t\t// Create an OAuth2Client instance for handling Google OAuth2\r\n\t\tconst oAuth2Client = new google.auth.OAuth2(\r\n\t\t\tprocess.env.CLIENT_ID,\r\n\t\t\tprocess.env.CLIENT_SECRET,\r\n\t\t\tprocess.env.REDIRECT_URL\r\n\t\t);\r\n\r\n\t\t// Set OAuth2Client credentials using the tokens from the authenticated user\r\n\t\toAuth2Client.setCredentials(AuthController.tokenn);\r\n\r\n\t\ttry {\r\n\t\t\t// Retrieve upcoming events from the user's calendar\r\n\t\t\tconst response = await CalendarService.calendar.events.list({\r\n\t\t\t\tcalendarId: \"primary\",\r\n\t\t\t\tauth: oAuth2Client,\r\n\t\t\t\ttimeMin: new Date().toISOString(),\r\n\t\t\t\tmaxResults: 10,\r\n\t\t\t\tsingleEvents: true,\r\n\t\t\t\torderBy: \"startTime\",\r\n\t\t\t});\r\n\r\n\t\t\t// Process the response data to extract relevant event details\r\n\t\t\tconst events = (await response).data.items || [];\r\n\t\t\tconst eventDetails: {\r\n\t\t\t\tsummary: String;\r\n\t\t\t\tdescription: String;\r\n\t\t\t\tstart: Date;\r\n\t\t\t\tend: Date;\r\n\t\t\t\tattendees: Myattendees;\r\n\t\t\t\tmeetLink: any;\r\n\t\t\t\tlocation: String;\r\n\t\t\t\teventId: String;\r\n\t\t\t}[] = [];\r\n\r\n\t\t\tevents.forEach((event: {\r\n\t\t\t\tstart?: any,\r\n\t\t\t\tsummary?: String ,\r\n\t\t\t\tdescription?: String,\r\n\t\t\t\tend?: any,\r\n\t\t\t\tattendees?: any,\r\n\t\t\t\tconferenceData?: any,\r\n\t\t\t\tlocation?: String,\r\n\t\t\t\tid?: String\r\n\t\t\t}) => {\r\n\t\t\t\tconst start = event.start.dateTime || event.start.date;\r\n\t\t\t\tconst eventObject = {\r\n\t\t\t\t\tsummary: event.summary || \"\",\r\n\t\t\t\t\tdescription: event.description || \"\",\r\n\t\t\t\t\tstart,\r\n\t\t\t\t\tend: event.end.dateTime || event.end.date,\r\n\t\t\t\t\tattendees: event.attendees || [],\r\n\t\t\t\t\tmeetLink: event.conferenceData || \"\",\r\n\t\t\t\t\tlocation: event.location || \"\",\r\n\t\t\t\t\teventId: event.id,\r\n\t\t\t\t};\r\n\t\t\t\teventDetails.push(eventObject);\r\n\t\t\t});\r\n\r\n\t\t\t// Log the processed event details and return them\r\n\t\t\tconsole.log(eventDetails);\r\n\t\t\tconsole.log(\"End of the function\");\r\n\t\t\treturn eventDetails;\r\n\t\t} catch (error: any) {\r\n\t\t\t// Log and throw any errors that occur during the process\r\n\t\t\tconsole.error(\"Error fetching events:\", error.message);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t// Method to update an existing event in the user's calendar\r\n\tpublic static async updateEvent(eventId, updatedEvent: eventData) {\r\n\t\t// Create an OAuth2Client instance for handling Google OAuth2\r\n\t\tconst oAuth2Client = new google.auth.OAuth2(\r\n\t\t\tprocess.env.CLIENT_ID,\r\n\t\t\tprocess.env.CLIENT_SECRET,\r\n\t\t\tprocess.env.REDIRECT_URL\r\n\t\t);\r\n\r\n\t\t// Convert updated event start and end times to ISO format\r\n\t\tconst startDateTime = dayjs(updatedEvent.startDateTime).toISOString();\r\n\t\tconst endDateTime = dayjs(updatedEvent.endDateTime).toISOString();\r\n\r\n\t\t// Set OAuth2Client credentials using the tokens from the authenticated user\r\n\t\toAuth2Client.setCredentials(AuthController.tokenn);\r\n\r\n\t\t// Update the specified event in the user's calendar\r\n\t\tconst response = await CalendarService.calendar.events.update({\r\n\t\t\tauth: oAuth2Client,\r\n\t\t\tcalendarId: \"primary\",\r\n\t\t\teventId: eventId,\r\n\t\t\tconferenceDataVersion: 1,\r\n\t\t\tsendNotifications:true,\r\n\t\t\trequestBody: {\r\n\t\t\t\tsummary: updatedEvent.summary,\r\n\t\t\t\tdescription: updatedEvent.description,\r\n\t\t\t\tlocation: updatedEvent.location,\r\n\t\t\t\tstart: {\r\n\t\t\t\t\tdateTime: startDateTime,\r\n\t\t\t\t\ttimeZone: \"Asia/Kolkata\",\r\n\t\t\t\t},\r\n\t\t\t\tend: {\r\n\t\t\t\t\tdateTime: endDateTime,\r\n\t\t\t\t\ttimeZone: \"Asia/Kolkata\",\r\n\t\t\t\t},\r\n\t\t\t\tconferenceData: {\r\n\t\t\t\t\tcreateRequest: {\r\n\t\t\t\t\t\trequestId: uuid(),\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tattendees: updatedEvent.attendees,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t// Log the updated event data and return it\r\n\t\tconsole.log(response.data);\r\n\t\treturn response.data;\r\n\t}\r\n\r\n\t// Method to delete an existing event from the user's calendar\r\n\tpublic static async deleteEvent(eventId) {\r\n\t\t// Create an OAuth2Client instance for handling Google OAuth2\r\n\t\tconst oAuth2Client = new google.auth.OAuth2(\r\n\t\t\tprocess.env.CLIENT_ID,\r\n\t\t\tprocess.env.CLIENT_SECRET,\r\n\t\t\tprocess.env.REDIRECT_URL\r\n\t\t);\r\n\r\n\t\t// Set OAuth2Client credentials using the tokens from the authenticated user\r\n\t\toAuth2Client.setCredentials(AuthController.tokenn);\r\n\r\n\t\t// Retrieve the details of the event before deleting it\r\n\t\tconst response1 = await CalendarService.calendar.events.get({\r\n\t\t\tauth: oAuth2Client,\r\n\t\t\tcalendarId: \"primary\",\r\n\t\t\teventId: eventId,\r\n\t\t});\r\n\r\n\t\t// Delete the specified event from the user's calendar\r\n\t\tconst response = await CalendarService.calendar.events.delete({\r\n\t\t\tauth: oAuth2Client,\r\n\t\t\tcalendarId: \"primary\",\r\n\t\t\tsendNotifications:true,\r\n\t\t\teventId: eventId,\r\n\t\t});\r\n\r\n\t\t// Return the details of the deleted event\r\n\t\treturn response1.data;\r\n\t}\r\n}\r\n"],"names":["CalendarService","insertEvent","eventData","oAuth2Client","google","auth","OAuth2","process","env","CLIENT_ID","CLIENT_SECRET","REDIRECT_URL","setCredentials","AuthController","tokenn","startDateTime","dayjs","toISOString","endDateTime","console","log","isLink","location","linkRegex","test","response","calendar","events","insert","calendarId","conferenceDataVersion","sendNotifications","requestBody","summary","description","start","dateTime","timeZone","end","attendees","conferenceData","createRequest","requestId","uuid","data","listEvents","userEmail","list","timeMin","Date","maxResults","singleEvents","orderBy","items","eventDetails","forEach","event","date","eventObject","meetLink","eventId","id","push","error","message","updateEvent","updatedEvent","update","deleteEvent","response1","get","delete","version"],"mappings":"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"}